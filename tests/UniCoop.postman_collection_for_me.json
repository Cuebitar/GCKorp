{
	"info": {
		"_postman_id": "ba262ddb-2a46-4688-93e1-baa764832516",
		"name": "UniCoop",
		"description": "Run the Login or register API first then copy the token then make it as Bearer Token global variable",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23901264"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"     const responseJson = pm.response.json();",
									"    pm.globals.set(\"BearerToken\", responseJson.data.token);",
									"     pm.test(\"Response is an object with success, data, and message properties\", function () {",
									"        const responseData = pm.response.json();",
									"        pm.expect(responseData).to.be.an('object').that.has.all.keys('success', 'data', 'message');",
									"    });",
									"",
									"    pm.test(\"The success property is a boolean\", function () {",
									"        const success = pm.response.json().success;",
									"        pm.expect(success).to.be.true;",
									"    });",
									"",
									"    pm.test(\"The data property is an object with token and user properties\", function () {",
									"        const data = pm.response.json().data;",
									"        pm.expect(data).to.be.an('object').that.has.all.keys('token', 'user', 'userDetails');",
									"    });",
									"",
									"    pm.test(\"The token property is a string\", function () {",
									"        const token = pm.response.json().data.token;",
									"        pm.expect(token).to.be.a('string');",
									"    });",
									"",
									"    pm.test(\"The user property is an object with account_id, email, created_at, updated_at, remember_token, userId, and deleted_at properties\", function () {",
									"        const user = pm.response.json().data.user;",
									"        pm.expect(user).to.be.an('object').that.has.all.keys('account_id', 'email', 'created_at', 'updated_at', 'remember_token', 'userId', 'deleted_at');",
									"    });",
									"",
									"    pm.test(\"The account_id property is a number\", function () {",
									"        const account_id = pm.response.json().data.user.account_id;",
									"        pm.expect(account_id).to.be.a('number');",
									"    });",
									"",
									"    pm.test(\"The email property is a string\", function () {",
									"        const email = pm.response.json().data.user.email;",
									"        pm.expect(email).to.be.a('string');",
									"    });",
									"",
									"    pm.test(\"The created_at property is a string\", function () {",
									"        const created_at = pm.response.json().data.user.created_at;",
									"        pm.expect(created_at).to.be.a('string');",
									"    });",
									"",
									"    pm.test(\"The updated_at property is a string\", function () {",
									"        const updated_at = pm.response.json().data.user.updated_at;",
									"        pm.expect(updated_at).to.be.a('string');",
									"    });",
									"",
									"    pm.test(\"The remember_token property is null or a string\", function () {",
									"        const remember_token = pm.response.json().data.user.remember_token;",
									"        pm.expect(remember_token).to.be.null;",
									"    });",
									"",
									"    pm.test(\"The userId property is a number\", function () {",
									"        const userId = pm.response.json().data.user.userId;",
									"        pm.expect(userId).to.be.a('number');",
									"    });",
									"",
									"    pm.test(\"The deleted_at property is null or a string\", function () {",
									"        const deleted_at = pm.response.json().data.user.deleted_at;",
									"        pm.expect(deleted_at).to.be.null;",
									"    });",
									"",
									"    pm.test(\"userId and accountId should be the same in user object\", function () {",
									"        const user = pm.response.json().data.user;",
									"        pm.expect(user.userId).to.equal(user.account_id);",
									"    });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"postmenTest01@unicoop.my\",\n    \"password\": \"1234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "shawnlhs",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"BearerToken\", null);",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response body structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('success');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Success field should be true\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Data field is an object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Message field is null or empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.oneOf([null, \"\"]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "grant_type",
								"value": "password",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_id",
								"value": "2",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client_secret",
								"value": "rtTT0NknNBmKGpMmrHn9Cw1SoYE62n1DrVW93gst",
								"type": "text",
								"disabled": true
							},
							{
								"key": "username",
								"value": "shawnlhs01@unicoop.my",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "1234567890",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_id",
									"value": "2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "rtTT0NknNBmKGpMmrHn9Cw1SoYE62n1DrVW93gst",
									"type": "text",
									"disabled": true
								},
								{
									"key": "username",
									"value": "shawnlhs01@unicoop.my",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/logout",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.status == 200){",
									"    const responseData = pm.response.json();",
									"    const responseJson = pm.response.json();",
									"    pm.globals.set(\"BearerToken\", responseJson.data.token);",
									"",
									"    pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate the 'success' field is present and is true\", function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.success).to.exist.and.to.be.true;",
									"    });",
									"",
									"",
									"    pm.test(\"Validate the 'data' field is present and is an object\", function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    });",
									"",
									"",
									"    pm.test(\"Token field is present and is a non-empty string\", function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.data.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"    });",
									"",
									"    pm.test(\"Verify that 'user' field is present in 'data' field\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"        pm.expect(responseData.data.user).to.exist.and.to.be.an('object');",
									"",
									"        pm.expect(responseData.data.user.account_id).to.equal(responseData.data.user.userId, \"account_id should be equal to userId\");",
									"        pm.expect(responseData.data.user.email).to.exist.and.to.equal(pm.request.json().email, \"Email should be equal to the entered email\");",
									"        pm.expect(responseData.data.user.created_at).to.exist.and.to.not.be.empty;",
									"        pm.expect(responseData.data.user.updated_at).to.exist.and.to.not.be.empty;",
									"        pm.expect(responseData.data.user.remember_token).to.be.null;",
									"    });",
									"}",
									"else{",
									"        pm.test(\"Response status code is 404\", function () {",
									"        pm.expect(pm.response.code).to.equal(404);",
									"        });",
									"",
									"        pm.test(\"Validate 'success' field is present and is false\", function () {",
									"            const responseData = pm.response.json();",
									"",
									"            pm.expect(responseData).to.be.an('object');",
									"            pm.expect(responseData.success).to.exist.and.to.be.false;",
									"        });",
									"",
									"",
									"        pm.test(\"Validate 'message' field is present and is an object\", function () {",
									"            const responseData = pm.response.json();",
									"",
									"            pm.expect(responseData).to.be.an('object');",
									"            pm.expect(responseData.message).to.exist.and.to.be.an('string');",
									"        });",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Postmen Test\",\n    \"IC\": \"201222204423\",\n    \"ICDocument\": \"postmentICDocc.pdf\",\n    \"email\": \"postmenTest01@unicoop.my\",\n    \"phoneNumber\": \"0112345567\",\n    \"password\": \"1234567890\",\n    \"password_confirmation\": \"1234567890\",\n    \"religion\": \"Christian\",\n    \"race\": \"Chinese\",\n    \"userType\": \"admin\",\n    \"gender\": \"male\",\n    \"status\": \"active\",\n    \"isVerified\": true,\n    \"address\": \"UTAR Sungai Long\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"register"
							],
							"query": [
								{
									"key": "email",
									"value": "shawnlhs",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check session user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.environment.get(\"variable_key\");",
									"pm.test(\"Response body is true\", function () {",
									"    pm.expect(pm.response.text()).to.equal(\"true\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"shawnlhs01@unicoop.my\",\n    \"password\": \"12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/checkUser",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"checkUser"
							]
						}
					},
					"response": []
				}
			],
			"description": "Get User data API is used for testing ahhh don't use"
		},
		{
			"name": "User",
			"item": [
				{
					"name": "restore account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user/restore/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user",
								"restore",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isVerified\": true,\n    \"rejectId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user/verify/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user",
								"verify",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"Kampar UTAR\",\n    \"phoneNumber\": \"01953282345\",\n    \"email\": \"updatedpostmen1@unicoop.my\",\n    \"password\": \"123123123\",\n    \"password_confirmation\": \"123123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/user/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bank Account",
			"item": [
				{
					"name": "Add Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bankName\": \"Maybank\",\n    \"accountName\": \"Postman\",\n    \"accountNo\": \"1111223532334245\",\n    \"bankStatement\": \"bankstatement1.pdf\",\n    \"status\": \"pending\",\n    \"userId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/bankAccount/account",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"bankAccount",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "update account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bankStatement\": \"updatedbankstatement.pdf\",\n    \"status\": \"approve\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/bankAccount/account/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"bankAccount",
								"account",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/bankAccount/account",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"bankAccount",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/bankAccount/account/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"bankAccount",
								"account",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/bankAccount/account/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"bankAccount",
								"account",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reject Reason",
			"item": [
				{
					"name": "Add Reject Reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rejectType\": \"User\",\n    \"description\": \"Insufficient Information\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rejectReason",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rejectReason"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Reject Reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Insufficient Document\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rejectReason/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rejectReason",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reject Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rejectReason/rejectType",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rejectReason",
								"rejectType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reject Reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rejectReason/User",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rejectReason",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Reject Reason",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/rejectReason/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"rejectReason",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trading Account",
			"item": [
				{
					"name": "update account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/account/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"account",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/account",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/account/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"account",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Details with Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/accountDetails/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"accountDetails",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/account/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"account",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "distribute dividen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 300,\n    \"transactionPurpose\": \"Term 1 Dividen\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/dividen",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"dividen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/account",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Add Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tradingAccountId\": 2,\n    \"bankAccountId\": 1,\n    \"amount\": 220,\n    \"status\": \"pending\",\n    \"type\": \"withdrawal\",\n     \"transactionPurpose\": \"Investment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/transaction",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "deposit account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tradingAccount_id\": 2,\n    \"transaction_id\": 1,\n    \"approve\": true,\n    \"type\": \"deposit\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/transaction/deposit",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "withdrawal account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tradingAccount_id\": 2,\n    \"transaction_id\": 2,\n    \"approve\": true,\n    \"type\": \"withdrawal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/transaction/withdrawal",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"transaction",
								"withdrawal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Trading Account Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/transaction",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Trading Account Transaction with Trading Account ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response data is an object\", function () {",
									"    pm.expect(pm.response.json().data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response data contains the required properties\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('bankName');",
									"    pm.expect(data).to.have.property('accountName');",
									"    pm.expect(data).to.have.property('accountNo');",
									"    pm.expect(data).to.have.property('bankStatement');",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('isPrimary');",
									"    pm.expect(data).to.have.property('userId');",
									"    pm.expect(data).to.have.property('updated_at');",
									"    pm.expect(data).to.have.property('created_at');",
									"    pm.expect(data).to.have.property('bankAccount_id');",
									"});",
									"",
									"pm.test(\"Response data properties have the correct types\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data.bankName).to.be.a('string');",
									"    pm.expect(data.accountName).to.be.a('string');",
									"    pm.expect(data.accountNo).to.be.a('string');",
									"    pm.expect(data.bankStatement).to.be.a('string');",
									"    pm.expect(data.status).to.be.a('string');",
									"    pm.expect(data.isPrimary).to.be.a('boolean');",
									"    pm.expect(data.userId).to.be.a('number');",
									"    pm.expect(data.updated_at).to.be.a('string');",
									"    pm.expect(data.created_at).to.be.a('string');",
									"    pm.expect(data.bankAccount_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response data is not empty\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(Object.keys(data).length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Response data success is true\", function () {",
									"    var success = pm.response.json().success;",
									"    pm.expect(success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tradingAccount/transaction/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tradingAccount",
								"transaction",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Updates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/updates/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"updates",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/notification/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"notification",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}